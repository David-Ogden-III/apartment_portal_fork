// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using apartment_portal_api.Data;

#nullable disable

namespace apartment_portal_api.Data.Migrations
{
    [DbContext(typeof(PostgresContext))]
    [Migration("20250303185938_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "auth", "aal_level", new[] { "aal1", "aal2", "aal3" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "auth", "code_challenge_method", new[] { "s256", "plain" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "auth", "factor_status", new[] { "unverified", "verified" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "auth", "factor_type", new[] { "totp", "webauthn", "phone" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "auth", "one_time_token_type", new[] { "confirmation_token", "reauthentication_token", "recovery_token", "email_change_token_new", "email_change_token_current", "phone_change_token" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "pgsodium", "key_status", new[] { "default", "valid", "invalid", "expired" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "pgsodium", "key_type", new[] { "aead-ietf", "aead-det", "hmacsha512", "hmacsha256", "auth", "shorthash", "generichash", "kdf", "secretbox", "secretstream", "stream_xchacha20" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "realtime", "action", new[] { "INSERT", "UPDATE", "DELETE", "TRUNCATE", "ERROR" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "realtime", "equality_op", new[] { "eq", "neq", "lt", "lte", "gt", "gte", "in" });
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "extensions", "pg_stat_statements");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "extensions", "pgcrypto");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "extensions", "pgjwt");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "extensions", "uuid-ossp");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "graphql", "pg_graphql");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "pgsodium", "pgsodium");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "vault", "supabase_vault");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("apartment_portal_api.Models.Guests.Guest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessCode")
                        .HasColumnType("integer")
                        .HasColumnName("accessCode");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdOn")
                        .HasDefaultValueSql("(now() AT TIME ZONE 'utc'::text)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiration");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("firstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("lastName");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phoneNumber");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userId");

                    b.HasKey("Id")
                        .HasName("guests_pkey");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "Email" }, "guests_email_key")
                        .IsUnique();

                    b.HasIndex(new[] { "PhoneNumber" }, "guests_phoneNumber_key")
                        .IsUnique();

                    b.ToTable("guests", (string)null);
                });

            modelBuilder.Entity("apartment_portal_api.Models.IssueTypes.IssueType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("issueTypes_pkey");

                    b.ToTable("issueTypes", (string)null);
                });

            modelBuilder.Entity("apartment_portal_api.Models.Issues.Issue", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userId");

                    b.Property<int>("IssueTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("issueTypeId");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdOn")
                        .HasDefaultValueSql("(now() AT TIME ZONE 'utc'::text)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.HasKey("UserId", "IssueTypeId")
                        .HasName("issues_pkey");

                    b.HasIndex("IssueTypeId");

                    b.ToTable("issues", (string)null);
                });

            modelBuilder.Entity("apartment_portal_api.Models.Packages.Package", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("integer")
                        .HasColumnName("code");

                    b.Property<int>("LockerNumber")
                        .HasColumnType("integer")
                        .HasColumnName("lockerNumber");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer")
                        .HasColumnName("statusId");

                    b.Property<int>("UnitId")
                        .HasColumnType("integer")
                        .HasColumnName("unitId");

                    b.HasKey("Id")
                        .HasName("packages_pkey");

                    b.HasIndex("StatusId");

                    b.HasIndex("UnitId");

                    b.HasIndex(new[] { "LockerNumber" }, "packages_lockerNumber_key")
                        .IsUnique();

                    b.ToTable("packages", (string)null);
                });

            modelBuilder.Entity("apartment_portal_api.Models.ParkingPermits.ParkingPermit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GuestId")
                        .HasColumnType("integer")
                        .HasColumnName("guestId");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("licensePlate");

                    b.Property<string>("LicensePlateState")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("licensePlateState");

                    b.Property<string>("VehicleMake")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("vehicleMake");

                    b.Property<string>("VehicleModel")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("vehicleModel");

                    b.HasKey("Id")
                        .HasName("parkingPermits_pkey");

                    b.HasIndex("GuestId");

                    b.ToTable("parkingPermits", (string)null);
                });

            modelBuilder.Entity("apartment_portal_api.Models.Statuses.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("statuses_pkey");

                    b.HasIndex(new[] { "Name" }, "statuses_name_key")
                        .IsUnique();

                    b.ToTable("statuses", (string)null);
                });

            modelBuilder.Entity("apartment_portal_api.Models.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("number");

                    b.Property<int>("Price")
                        .HasColumnType("integer")
                        .HasColumnName("price");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer")
                        .HasColumnName("statusId");

                    b.HasKey("Id")
                        .HasName("units_pkey");

                    b.HasIndex("StatusId");

                    b.HasIndex(new[] { "Number" }, "units_number_key")
                        .IsUnique();

                    b.ToTable("units", (string)null);
                });

            modelBuilder.Entity("apartment_portal_api.Models.UnitUsers.UnitUser", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("userId");

                    b.Property<int>("UnitId")
                        .HasColumnType("integer")
                        .HasColumnName("unitId");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("createdBy");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdOn")
                        .HasDefaultValueSql("(now() AT TIME ZONE 'utc'::text)");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean")
                        .HasColumnName("isPrimary");

                    b.Property<string>("LeaseAgreement")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("leaseAgreement");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("integer")
                        .HasColumnName("modifiedBy");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modifiedOn")
                        .HasDefaultValueSql("(now() AT TIME ZONE 'utc'::text)");

                    b.HasKey("UserId", "UnitId")
                        .HasName("unitUsers_pkey");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("UnitId");

                    b.ToTable("unitUsers", (string)null);
                });

            modelBuilder.Entity("apartment_portal_api.Models.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("createdBy");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdOn")
                        .HasDefaultValueSql("(now() AT TIME ZONE 'utc'::text)");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("dateOfBirth");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("firstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("lastName");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("integer")
                        .HasColumnName("modifiedBy");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modifiedOn")
                        .HasDefaultValueSql("(now() AT TIME ZONE 'utc'::text)");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer")
                        .HasColumnName("statusId");

                    b.HasKey("Id")
                        .HasName("users_pkey");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("StatusId");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("apartment_portal_api.Models.Guests.Guest", b =>
                {
                    b.HasOne("apartment_portal_api.Models.Users.User", "User")
                        .WithMany("Guests")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("guests_userId_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("apartment_portal_api.Models.Issues.Issue", b =>
                {
                    b.HasOne("apartment_portal_api.Models.IssueTypes.IssueType", "IssueType")
                        .WithMany("Issues")
                        .HasForeignKey("IssueTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("issues_issueTypeId_fkey");

                    b.HasOne("apartment_portal_api.Models.Users.User", "User")
                        .WithMany("Issues")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("issues_userId_fkey");

                    b.Navigation("IssueType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("apartment_portal_api.Models.Packages.Package", b =>
                {
                    b.HasOne("apartment_portal_api.Models.Statuses.Status", "Status")
                        .WithMany("Packages")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("packages_statusId_fkey");

                    b.HasOne("apartment_portal_api.Models.Unit", "Unit")
                        .WithMany("Packages")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("packages_unitId_fkey");

                    b.Navigation("Status");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("apartment_portal_api.Models.ParkingPermits.ParkingPermit", b =>
                {
                    b.HasOne("apartment_portal_api.Models.Guests.Guest", "Guest")
                        .WithMany("ParkingPermits")
                        .HasForeignKey("GuestId")
                        .IsRequired()
                        .HasConstraintName("parkingPermits_guestId_fkey");

                    b.Navigation("Guest");
                });

            modelBuilder.Entity("apartment_portal_api.Models.Unit", b =>
                {
                    b.HasOne("apartment_portal_api.Models.Statuses.Status", "Status")
                        .WithMany("Units")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("units_statusId_fkey");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("apartment_portal_api.Models.UnitUsers.UnitUser", b =>
                {
                    b.HasOne("apartment_portal_api.Models.Users.User", "CreatedByNavigation")
                        .WithMany("UnitUserCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("unitUsers_createdBy_fkey");

                    b.HasOne("apartment_portal_api.Models.Users.User", "ModifiedByNavigation")
                        .WithMany("UnitUserModifiedByNavigations")
                        .HasForeignKey("ModifiedBy")
                        .IsRequired()
                        .HasConstraintName("unitUsers_modifiedBy_fkey");

                    b.HasOne("apartment_portal_api.Models.Unit", "Unit")
                        .WithMany("UnitUsers")
                        .HasForeignKey("UnitId")
                        .IsRequired()
                        .HasConstraintName("unitUsers_unitId_fkey");

                    b.HasOne("apartment_portal_api.Models.Users.User", "User")
                        .WithMany("UnitUserUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("unitUsers_userId_fkey");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("ModifiedByNavigation");

                    b.Navigation("Unit");

                    b.Navigation("User");
                });

            modelBuilder.Entity("apartment_portal_api.Models.Users.User", b =>
                {
                    b.HasOne("apartment_portal_api.Models.Users.User", "CreatedByNavigation")
                        .WithMany("InverseCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("users_createdBy_fkey");

                    b.HasOne("apartment_portal_api.Models.Users.User", "ModifiedByNavigation")
                        .WithMany("InverseModifiedByNavigation")
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("users_modifiedBy_fkey");

                    b.HasOne("apartment_portal_api.Models.Statuses.Status", "Status")
                        .WithMany("Users")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("users_statusId_fkey");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("ModifiedByNavigation");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("apartment_portal_api.Models.Guests.Guest", b =>
                {
                    b.Navigation("ParkingPermits");
                });

            modelBuilder.Entity("apartment_portal_api.Models.IssueTypes.IssueType", b =>
                {
                    b.Navigation("Issues");
                });

            modelBuilder.Entity("apartment_portal_api.Models.Statuses.Status", b =>
                {
                    b.Navigation("Packages");

                    b.Navigation("Units");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("apartment_portal_api.Models.Unit", b =>
                {
                    b.Navigation("Packages");

                    b.Navigation("UnitUsers");
                });

            modelBuilder.Entity("apartment_portal_api.Models.Users.User", b =>
                {
                    b.Navigation("Guests");

                    b.Navigation("InverseCreatedByNavigation");

                    b.Navigation("InverseModifiedByNavigation");

                    b.Navigation("Issues");

                    b.Navigation("UnitUserCreatedByNavigations");

                    b.Navigation("UnitUserModifiedByNavigations");

                    b.Navigation("UnitUserUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
